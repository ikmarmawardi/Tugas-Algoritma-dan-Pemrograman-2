No. 5) . Buat program dalam bahasa c++ yang menerapkan metode Shell Short dalam mengurutkan angka secara ascending.


#include <iostream>
using namespace std;
  
int shellSort(int arr[], int N)
{
for (int gap = N/2; gap > 0; gap /= 2) {
 for (int i = gap; i < N; i += 1) {
      
int temp = arr[i];
int j;
for (j = i; j >= gap && arr[j - gap] > temp; j -= gap)
arr[j] = arr[j - gap];
   
      arr[j] = temp;
   }
}
return 0;
}
  
int main()
{
int arr[] = {45,23,53,43,18};
   
int N = sizeof(arr)/sizeof(arr[0]);
  
 cout << "Array sebelum diurutkan: \n";
 for (int i=0; i<N; i++)
 cout << arr[i] << " ";
  
 shellSort(arr, N);
  
cout << "\nArray setelah diurutkan: \n";
for (int i=0; i<N; i++)
cout << arr[i] << " ";
 
 return 0;
}


No. 6) Buat program dalam bahasa c++ yang menerapkan metode Merge Sort dalam mengurutkan angka secara ascending.

#include <iostream>
using namespace std;

void merge(int *,int, int , int );
void merge_sort(int *arr, int low, int high)
{
   int mid;
   if (low < high){
     
      mid=(low+high)/2;
      merge_sort(arr,low,mid);
      merge_sort(arr,mid+1,high);
      
      merge(arr,low,high,mid);
   }
}
// Merge sort
void merge(int *arr, int low, int high, int mid)
{
   int i, j, k, c[50];
   i = low;
   k = low;
   j = mid + 1;
   while (i <= mid && j <= high) {
   if (arr[i] < arr[j]) {
   c[k] = arr[i];
   k++;
   i++;
}
else {
   c[k] = arr[j];
   k++;
   j++;
   }
}
  
while (i <= mid) {
   c[k] = arr[i];
   k++;
   i++;
}
while (j <= high) {
   c[k] = arr[j];
   k++;
   j++;
}
for (i = low; i < k; i++) {
   arr[i] = c[i];
}
}

int main()
{
int myarray[30], num;
cout<<"Masukkan jumlah elemen yang ingin diurutkan:";
cin>>num;
cout<<"Masukkan "<<num<<" elemen yang akan diurut:";
for (int i = 0; i < num; i++) { cin>>myarray[i];
}
merge_sort(myarray, 0, num-1);
cout<<"Setelah diurut\n";
for (int i = 0; i < num; i++)
{
   cout<<myarray[i]<<"\t";
}
}


No. 7) Buat program dalam bahasa c++ yang menerapkan metode Insertion Sort dalam mengurutkan angka secara ascending.

#include <iostream> 
using namespace std; 
  
/* Function to sort an array using insertion sort*/
void insertionSort(int arr[], int n)  
{  
    int i, key, j;  
    for (i = 1; i < n; i++) 
    {  
        key = arr[i];  
        j = i - 1;  
  
        /* Move elements of arr[0..i-1], that are  
        greater than key, to one position ahead  
        of their current position */
        while (j >= 0 && arr[j] > key) 
        {  
            arr[j + 1] = arr[j];  
            j = j - 1;  
        }  
        arr[j + 1] = key;  
    }  
}  
  
// A utility function to print an array of size n  
void printArray(int arr[], int n)  
{  
    int i;  
    for (i = 0; i < n; i++)  
        cout << arr[i] << " ";  
    cout << endl; 
}  
  
/* Driver code */
int main()  
{  
    int arr[] = { 12, 11, 13, 5, 6 };  
	int n = sizeof(arr) / sizeof(arr[0]);
	 cout<<"Before sorting= ";
    printArray(arr, n);  
  	cout<<"After Sorting= ";
    insertionSort(arr, n);  
    printArray(arr, n);  
  
    return 0;  
}


No. 8) Buat program dalam bahasa c++ yang menerapkan metode Selection Sort dalam mengurutkan angka secara Descending.

#include<iostream>
using namespace std;
 
int selectionSort (int[],int); //fungsi selection sort mencari bilangan terkecil
int main ()
{
   int myarray[5] = {11,44,7,14,32};
   int pos,temp;
   cout<<"\n Masukkan elemen yang diurutkan\n";
   for(int i=0;i<5;i++)
   {
      cout<<myarray[i]<<"\t";
   }
   for(int i=0;i<5;i++)
   {
      pos = selectionSort (myarray,i);
      temp = myarray[i];
      myarray[i]=myarray[pos];
      myarray[pos] = temp;
   }
   cout<<"\n Setelah di urut\n";
   for(int i=0;i<5;i++)
   {
      cout<<myarray[i]<<"\t";
   }
return 0;
}
int selectionSort(int myarray[],int i)
{
   int ele_small,position,j;
   ele_small = myarray[i];
   position = i;
   for(j=i+1;j<5;j++)
   {
      if(myarray[j]<ele_small)
      {
      ele_small = myarray[j];
      position=j;
      }
   }
   return position;
}


No. 9) Buat program dalam bahasa c++ yang menerapkan metode Bubble Sort dalam mengurutkan angka secara Descending.

#include <stdio.h> 

void swap(int *xp, int *yp) 
{ 
	int temp = *xp; 
	*xp = *yp; 
	*yp = temp; 
} 
void bubbleSort(int arr[], int n) 
{ 
int i, j; 
bool swapped; 
for (i = 0; i < n-1; i++) 
{ 
	swapped = false; 
	for (j = 0; j < n-i-1; j++) 
	{ 
		if (arr[j] < arr[j+1]) //(>)Ascending (<)Descending
		{ 
		swap(&arr[j], &arr[j+1]); 
		swapped = true; 
		} 
	} 

	if (swapped == false) 
		break; 
} 
} 

void printArray(int arr[], int size) 
{ 
	int i; 
	for (i=0; i < size; i++) 
		printf("%d ", arr[i]); 
	printf(""); 
} 
 
int main() 
{ 
	int arr[] = {64, 34, 25, 12, 22, 11, 90}; 
	int n = sizeof(arr)/sizeof(arr[0]);
	printf("Array sebelum sorting : \n");
	printArray(arr, n);
	bubbleSort(arr, n);
	printf("\nArray setelah sorting : \n"); 
	printArray(arr, n); 
	return 0; 
}
